Task description:
Given the premises in first-order logic form, please decompose the FOL statement using normalization and skolemization.
—--
Rules:
Normalization: Convert each premise and the conclusion to Prenex Normal Form (PNF) and then to Conjunctive Normal Form (CNF).

- **CNF Definition**:
  - A formula is in **Conjunctive Normal Form (CNF)** if it is a conjunction (AND, ∧) of clauses, where each clause is a disjunction (OR, ∨) of literals.
  - A **literal** is an atomic formula or its negation.

- **Negating Clauses**:
  - **First**: If the clause includes a boolean value (True or False), switch the boolean value (True ↔ False).

- **Conversion Negations**:
  1. A⊕B→C ≡ (¬A∨B∨C)∧(A∨¬B∨C)
  2. A⊕B→(C∧D) ≡ (¬A∨B∨C)∧(¬A∨B∨D)∧(A∨¬B∨C)∧(A∨¬B∨D)
—--
Below is an example:
Context:

### Rules:
1. Pure($x, False) ⊕ Doubtful($x, False) >>> Grieving(Lynda, False)
2. Capable($x, False) ⊕ Kind($x, True) >>> Rich($x, True) ∧ Shy($x, True)

### Step-by-Step Normalization


#### Rule 1: 
\[
\forall x \left((Pure(x, False) \oplus Doubtful(x, False)) \rightarrow Grieving(Lynda, False)\right)
\]
- Identify corresponding Exclusive or conversion rule:
    Since the conclusion contain only one term Grieving(Lynda, False), so we use rule 1. A⊕B→C ≡ (¬A∨B∨C)∧(A∨¬B∨C)

- Apply Exclusive OR conversion rule:
  \[
  A⊕B→C≡(¬A∨B∨C)∧(A∨¬B∨C)
  A=Pure(x,False), B=Doubtful(x,False), C=Grieving(Lynda,False)
  \]
- Subsutitude these into the conversion rule (¬A∨B∨C)∧(A∨¬B∨C)
  \[
  A = Pure(x, False), ¬A = Pure(x, True)
  B = Doubtful(x, False), ¬B = Doubtful(x, true)
  C = Grieving(Lynda, False)
  \]
- Substituting into the formula:
  \[
  (Pure(x,True)∨Doubtful(x,False)∨Grieving(Lynda,False))∧(Pure(x,False)∨Doubtful(x,True)∨Grieving(Lynda,False))
  \]

#### Rule 2: 
\[
Capable($x, False) ⊕ Kind($x, True) >>> Rich($x, True) ∧ Shy($x, True)
\]
- Identify corresponding Exclusive or conversion rule:
   Because the conclusion contains a conjunction (AND) of two terms (Rich($x, True) ∧ Shy($x, True)), so we use the the formula 2. A⊕B→C:(¬A∨B∨C)∧(A∨¬B∨C)
- Apply Exclusive OR conversion rule:
  \[
  A⊕B→(C∧D)≡(¬A∨B∨C)∧(¬A∨B∨D)∧(A∨¬B∨C)∧(A∨¬B∨D)
  A=Capable(x, False), B=Kind(x, True), C=Rich(x, True), D=Shy(x, True)
  \]
- Subsutitude these into the conversion rule (¬A∨B∨C)∧(A∨¬B∨C)
  \[
  A=Capable(x, False), ¬A=Capable(x, True)
  B=Kind(x, True), ¬B=Kind(x, False)
  C=Rich(x, True)
  D=Shy(x, True)
  \]
- Substituting into the formula:
  \[
  (Capable(x,True)∨Kind(x,True)∨Rich(x,True))∧(Capable(x,True)∨Kind(x,True)∨Shy(x,True))∧(Capable(x,False)∨Kind(x,False)∨Rich(x,True))∧(Capable(x,False)∨Kind(x,False)∨Shy(x,True))
  \]


### Final Form:

1. (Pure(x,True)∨Doubtful(x,False)∨Grieving(Lynda,False))∧(Pure(x,False)∨Doubtful(x,True)∨Grieving(Lynda,False))
2. (Capable(x,True)∨Kind(x,True)∨Rich(x,True))∧(Capable(x,True)∨Kind(x,True)∨Shy(x,True))∧(Capable(x,False)∨Kind(x,False)∨Rich(x,True))∧(Capable(x,False)∨Kind(x,False)∨Shy(x,True)) 
—--
Below is the one you need to decompose using normalization and skolemization. Please clearly indicate the finalized form using 'Final Form: place_holder_for_finalized_form' at the end of your response, and make sure you only need to conclude once (Do not conclude multiple "Final Form"). Please use '\n' to split each clause in the 'Final Form'.

Premises:
[[PREMISES]]
